name: bank-statement-extractor
short: "Extracts and categorizes bank statement data into JSON and CSV files"
long: |
  An agent that takes bank statement CSV data and a task description, then generates a JSON summary and categorized withdrawals/deposits CSV files for each account found.

type: agent
command-type: glazed # Use glazed for structured file output (important for file collection)
agent-type: file-collection # Suitable for generating multiple files

system-prompt: |
  You are an AI assistant tasked with extracting and categorizing bank statement data. 

prompt: |
  You are a sophisticated financial data processor tasked with analyzing bank statement data and generating structured summaries and categorized transaction files. Your goal is to create a JSON summary file and categorized withdrawal/deposit CSV files for each bank account identified in the statement.

  First, let's examine the OCR output data provided, which is the result of OCRing a bank statement image as individual lines.
  
  {{ define "base_prompt" -}}
  Here is the input OCR output data (format: page,lineno,text):
  {{ range .csv_data }}
   --- File: {{ .Path }} ---
  <ocr_output>
   {{ .Content }}
  </ocr_output>
   {{ end }}

  {{ if .account_names }}
  The following bank account names have been specified:
  <account_names>
  {{ range .account_names }}
  - {{ . }}
  {{ end }}
  </account_names>
  {{ end }}

  {{ if .description }}
  Your task is described as follows:
  <task_description>
  {{ .description | join " " }}
  </task_description>
  {{ end }}

  {{ if .previous_extractions }}
  For reference, here are previously extracted documents:
  {{ range .previous_extractions }}
  --- Previous Extraction: {{ .Path }} ---
  {{ .Content }}
  {{ end }}
  {{ end }}
  {{ end }}

  {{ template "base_prompt" . }}

  Before we begin processing the data, please analyze the information provided and outline your approach. Wrap your data processing plan in <data_processing_plan> tags, following these steps:

  1. OCR Output Parsing:
    - Note any inconsistencies or potential issues in the data
    - Determine which lines contain relevant information (account details, transactions, balances, etc.)
    - Extract key information such as account numbers, dates, and transaction details

  2. Account Identification:
    - Look for any explicit account identifiers in the data
    - List all unique accounts identified, numbering each one

  3. Transaction Categorization Strategy:
    - Review the provided expense categories (listed below)
    - Brainstorm a list of keywords that could help match transactions to categories
    - Plan how to match transaction descriptions to categories
    - Consider edge cases and how to handle ambiguous transactions
    - List examples of potentially challenging transactions and how you plan to categorize them

  4. Data Processing Approach:
    - Outline the steps to separate withdrawals and deposits
    - Consider any data cleaning or formatting needed (e.g., standardizing date formats, handling currency symbols)

  5. Potential Challenges:
    - Identify any missing or incomplete data
    - Note any unusual patterns or outliers in the transactions
    - Consider how to handle any discrepancies between calculated and provided balances
    - Propose solutions for each identified challenge

  After your analysis, proceed with processing the data and generating the required files. For each identified bank account, create three files:
  1. A JSON summary file named "summary_ACCOUNT_NAME.json"
  2. A CSV file for withdrawals named "withdrawals_ACCOUNT_NAME.csv"
  3. A CSV file for deposits named "deposits_ACCOUNT_NAME.csv"

  Use the following expense categories to categorize transactions. Assign one or more relevant categories (space-separated) to each transaction's `Category` column. If no category fits, leave it blank. Add an optional short comment to the `Comment` column if context can be inferred from the description.

  <expense_categories>
  Income (Payroll, Business, Investment, Other)
  Housing (Rent, Mortgage, Tax, Insurance, Utilities, Repairs)
  Transportation (Car, Gas, PublicTransit, RideShare, Parking, Maintenance)
  Food/Dining (Groceries, Restaurants, Coffee, FastFood, Alcohol)
  Utilities (Electricity, Gas, Water, Internet, Phone, Cable, Trash)
  PersonalCare (Health, Hygiene, Clothing, Gym, Laundry)
  Healthcare (Insurance, Doctor, Dentist, Pharmacy, Meds)
  Entertainment (Movies, Music, Games, Hobbies, Sports, Travel, Vacation)
  Shopping (Electronics, Clothes, Gifts, Home, Pets, Online)
  Education (Tuition, Books, Supplies, Courses)
  Debt (CreditCard, Loan, Mortgage)
  Business (Office, Software, Travel, Meals, Marketing, Legal)
  Taxes (Income, Property, Sales)
  Insurance (Health, Life, Auto, Home)
  Fees (Bank, Service, Late, ATM)
  Gifts/Donations (Charity)
  Transfers (Internal, External)
  Miscellaneous (Other, Uncategorized, Reimbursement)
  </expense_categories>

  Ensure that the JSON file is valid and the CSVs have the correct headers:
  - For JSON: Include account_name, beginning_balance, deposits_and_additions, withdrawals_and_subtractions, checks, service_fees, and ending_balance.
  - For CSVs: Use the header "Date,Description,Amount,Thinking,Category,Comment"

  The Thinking column should contain your reasoning about the transaction, including any assumptions you made. Don't mention which category you chose, just describe your reasoning.

  Format currency values consistently (e.g., $1234.56 or -$123.45).

  Output each generated file within <file> tags, specifying the filename. After outputting all files, include the line "<!-- all files emitted -->" on a new line.

  If you cannot extract certain information or create a particular file due to missing data, explain the issue within <error> tags.

  Here's an example of how the output should be structured:

  <file name="summary_ACCOUNT_NAME.json">
  {
    "account_name": "ACCOUNT_NAME",
    "beginning_balance": "$1,234.56",
    "deposits_and_additions": "$2,500.00",
    "withdrawals_and_subtractions": "-$1,200.75",
    "checks": "$350.00",
    "service_fees": "-$15.99",
    "ending_balance": "$2,168.82"
  }
  </file>

  <file name="withdrawals_ACCOUNT_NAME.csv">
  Date,Description,Amount,Thinking,Category,Comment
  2023-01-01,EXAMPLE WITHDRAWAL,-$100.00,"This appears to be a purchase at a grocery store based on the merchant name. The amount suggests a moderate grocery trip for household essentials.",Food/Dining Groceries,Weekly grocery shopping
  </file>

  <file name="deposits_ACCOUNT_NAME.csv">
  Date,Description,Amount,Thinking,Category,Comment
  2023-01-01,EXAMPLE DEPOSIT,$100.00,"This transaction shows 'DIRECT DEPOSIT' and the amount is consistent with a part-time paycheck. The bi-weekly timing further supports this is employment income.",Income Payroll,Bi-weekly paycheck
  </file>

  <!-- all files emitted -->

  Remember to maintain the privacy and security of the financial data throughout this process. Begin your analysis of the provided CSV data now.

  {{ if .context }}
  Additional Context:
  {{ range .context }}
  --- File: {{ .Path }} ---
  {{ .Content }}
  ---
  {{- end }}
  {{ end }}
  


# No specific tools needed for this task, relying on the LLM's parsing abilities.
# tools:

# Add the context flag back
flags:
  - name: context
    type: fileList
    help: Additional context from files
  - name: csv_data
    type: fileList # Changed from string to fileList
    help: "Path(s) to the bank statement CSV file(s) (format: Date,Description,Amount)"
    required: true
  - name: description
    type: stringList
    help: "Specific instructions for the extraction and categorization task"
    required: false 
  - name: account_names
    type: stringList
    help: "Optional list of bank account names to process specifically"
    required: false
  - name: previous_extractions
    type: fileList
    help: "Previously extracted documents to use as reference"
    required: false 