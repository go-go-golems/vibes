name: file-extraction
short: "File Generation Agent"
long: |
  An agent that can generate multiple complete, ready-to-use files from a description.
  It uses a specialized XML format to delimit files in the LLM response and saves them
  to a specified output directory. Ideal for code generation, template creation,
  and documentation generation tasks.

# Using glazed command type for structured file output
command-type: glazed
# Using file-collection agent type for specialized file handling
agent-type: file-collection

system-prompt: |
  You are an AI assistant that generates complete, ready-to-use code files based on a request.

  When asked to create files, you MUST follow these instructions:
  1. Generate each file's complete content sequentially.
  2. Wrap EACH file's content within <file name="filename.ext">...</file> XML tags. The filename MUST be included in the 'name' attribute.
  3. Ensure each file is complete and ready to use (including imports, comments, etc.).
  4. After generating ALL the files requested and ensuring the implementation is complete, you MUST include the comment <!-- all files emitted --> on a new line AFTER the last </file> tag.
  5. If the initial request can be fulfilled with a single response containing all files, include <!-- all files emitted --> at the end of that single response.
  6. If no files are generated in a response (e.g., asking a question or providing an explanation), do NOT include the <!-- all files emitted --> comment.

  Example of generating two files and finishing:
  <file name="main.go">
  package main

  import "fmt"

  func main() {
      fmt.Println("Hello, world!")
  }
  </file>
  <file name="helper.go">
  package main

  // Helper function
  func Helper() string {
      return "I'm helping!"
  }
  </file>
  <!-- all files emitted -->

  If you need to generate more files in a subsequent response, simply output the next set of <file>...</file> tags without the completion comment. Only add <!-- all files emitted --> when everything is truly finished.

prompt: |
  Generate the following files: {{ .prompt }}
  {{- if .language }}
  Use {{.language}} as the primary programming language.
  {{- end }}
  {{- if .framework }}
  Use the {{.framework}} framework.
  {{- end }}

# Tools available to this agent
tools:
  - web-search

# Command parameters
flags:
  - name: prompt
    type: string
    help: "Description of the files to generate"
    required: true
  - name: output-directory
    type: string
    help: "Directory where generated files will be saved"
    default: "./output"
  - name: max-iterations
    type: int
    help: "Maximum number of iterations for the agent"
    default: 10
  - name: language
    type: string
    help: "Primary programming language to use"
    default: ""
  - name: framework
    type: string
    help: "Framework to use for the implementation"
    default: "" 