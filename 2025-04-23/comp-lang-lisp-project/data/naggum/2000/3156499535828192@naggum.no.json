{
  "url": "https://www.xach.com/naggum/articles/3156499535828192@naggum.no.html",
  "id": "3156499535828192@naggum.no",
  "title": "Re: About the usage of throw/catch",
  "content": "\nSubject: Re: About the usage of throw/catch\nFrom: Erik Naggum <erik@naggum.no>\nDate: 2000/01/10\nNewsgroups: comp.lang.lisp\nMessage-ID: <3156499535828192@naggum.no>\n\n* arolambler@aol.com (ArolAmbler)\n| I also weigh in on the presumably more controversial side of even\n| return-from as being \"dirty\", not to mention a go outside of the\n| originating tagbody.\n\n  I'd like an example of a GO outside of the \"originating TAGBODY\" that you\n  consider dirty.  (hint: maybe you don't know the language very well...)\n\n| The \"dirtiness\" arises partly from the lack of reusability of the\n| resulting code.\n\n  reusable code is best defined as _functions_ that you can call from other\n  bodies or code than the body of code it was originally designed to serve.\n\n  reusable code is worst defined as code that can be copied (i.e., cut and\n  paste) from one body of code to another -- yet that is what most people\n  consider it to be, mostly because they don't have sufficiently powerful\n  function concepts and engage in programming-by-cut-and-paste themselves.\n\n  \"reusable code\" is nothing more than a new name for \"write library code\n  whenever you can\" which is really nothing more than a way of expressing\n  the age-old concept of \"abstraction\".  of course, when you change focus\n  or angle, but keep staring at the same old thing, you need a new name so\n  the people who got disappointed the first few times won't notice the very\n  same thing you've all been staring at.\n\n| A \"clean\" piece of code in any language should, ideally, never, EVER, for\n| ANY arguments whatsoever, do a non-local transfer of control, of any kind.\n\n  and _I_ think this argument is nothing more than the extremely na√Øve\n  argument used when people want 100% security or want to abolish accidents\n  completely, and then they go hunting for someone to sue whenever a\n  security violation or an accident happens, as if nature itself offended\n  them by not submitting to their wishful thinking.\n\n  the answer to such folly as \"if only the world were ideal...\" is simply:\n  \"if only the ideals were wordly...\".\n\n  I'm not afraid to implement what I think will have an ideal _interface_\n  using whatever dirty tricks are _necessary_ (but none beyond that, of\n  course).  I don't _want_ people to peek inside my function bodies and\n  reuse the code with cut and paste, nor do I want people to fuck with the\n  code so there will be hundreds of incompatible versions hacked on by\n  people who have no regard for the abstract task it was designed to\n  perform -- I want people to call the function when they can and call me\n  if they can't.\n\n  the desire to abolish accidents is _highly_ irrational.  the same goes\n  for the desire never to see \"dirty\" code.  what it means is that somebody\n  else should pay an enormous price for the wishful thinking to come true,\n  which is quite typical of irrational political desires.  for some reason,\n  the United States is the only country on earth where accidents don't\n  happen -- it's always somebody's fault, and you can sue that somebody for\n  _neglect_.  the same goes for \"dirty\" code -- if you have to code so\n  verbosely that you can't finish typing in finite time, that's somehow\n  better than using a safe mechanism for non-local transfer of control --\n  and the result is the same as the litigous American society: people lose\n  the ability to deal with the exceptional that is still within the normal.\n\n  this is not to say that certain tasks cannot be written in some \"ideal\"\n  way according to some otherwordly school of thought, but the belief that\n  anybody uses non-local transfer of control _wantonly_ is offensive to any\n  competent craftsmen.\n\n#:Erik\n\n",
  "date": "2000-01-10",
  "author": "Erik Naggum",
  "references": [],
  "source": "naggum"
}