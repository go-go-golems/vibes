{
  "url": "https://www.xach.com/naggum/articles/3161170559722358@naggum.no.html",
  "id": "3161170559722358@naggum.no",
  "title": "Re: [executables] was: why Haskell hasn't replaced CL yet?",
  "content": "\nSubject: Re: [executables] was: why Haskell hasn't replaced CL yet?\nFrom: Erik Naggum <erik@naggum.no>\nDate: 2000/03/04\nNewsgroups: comp.lang.lisp\nMessage-ID: <3161170559722358@naggum.no>\n\n* not.for.email@not.for.spam\n| On 03 Mar 2000 22:58:49 +0000, Erik Naggum <erik@naggum.no> wrote:\n| \n| >  extremely little business value in catering to people who mainly execute\n| >  really tiny programs like the null program or \"hello, world\" programs.\n| \n| That's silly.\n\n  then why do you argue that people spend time publishing results in that\n  area?  clearly, your argument is that these things matter a great deal.\n  but I quite agree that it's silly to be concerned about such things, and\n  I'm delighted that you recognize silliness when properly framed -- you\n  might actually recognize that your core argument is indeed very silly.\n\n| It should be obvious to you that people who want to test \"hello world\"\n| programs do not have such programs as their main goal.  The main purpose\n| of such a program is to minimize the complexity of a program to explore\n| the issues of compiling, installing, etc., independently of issues of\n| program complexity.\n\n  if that _were_ the goal, I'd agree that it would be useful to help people\n  with such programs.  however, it isn't, and you know it isn't.  those who\n  argue for small executables do so on the basis of \"overhead\", which is\n  not a question of how much the language needs, but how well the operating\n  system is able to accomodate its needs.  so small executable size is a\n  tribute to the operating system and the language, while large executable\n  overhead is a blemish on the operating system.  oddly enough, people take\n  it out on the language.  this is not just silly, it's idiotic.\n\n| My interest in null programs is because I happen to presently use a lot\n| of software in the \"pipes and filters\" paradigm, and I would like to\n| replace some of that software with my own versions, which I might like to\n| write in Lisp.\n\n  if you were truly interested, you would be willing to consider many ways\n  to accomplish your needs.  \"pipes and filters\" does _not_ translate into\n  \"small executable with short startup-up time\" except to the permanently\n  braindamaged C victims.  in particular, a good way to make use of Lisp is\n  to have a very heavy process that maintains a lot of state, but which\n  tiny C programs talk to via sockets, if this is hard to do directly from\n  whatever \"scripts\" are otherwise engaged in the \"pipes and filters\"\n  thing.  (IMNSHO, the sorry fact that shells have not grown to be able to\n  make network connections instead of just pipes is _really_ pathetic.)\n\n| Note that I am not advocating using \"pipes and filters\" as a good\n| paradigm for any particular project.  The reason I want to use it is to\n| be compatible with software I already have.  I also want to use Lisp or\n| some such language for bigger projects, but would rather use the same\n| language and programming environment for both types of projects.\n\n  you can, but you have to zoom out and _think_ about your problem.  you\n  can't expect everything new to fit the same old mold.  in this case, the\n  friggin obvious solution is to write a pipe-and-filter thingy in C that\n  talks to the Lisp process.  that way, you reduce the start-up time to\n  that of C (which you seem to believe is short) plus the overhead of\n  connecting to the already running Lisp process, which is, like, _really_\n  short.  if you have problems with this extra \"layer\" of code, yet observe\n  that you get dramatically improved performance, which you would if you\n  tried it instead of just rejecting any other solutions than \"run the\n  program\", I'd say you have a political agenda and not an engineering\n  problem, anymore.\n\n  it so happens that _every_ other person who has posted to this newsgroup\n  about his misgivings about startup times has had a political agenda and a\n  need to complain rather than get any real work done.  you're not in good\n  company.  if you don't like this, you need do nothing more than show that\n  you have worthy goals with your quest -- and that is best shown by simply\n  abandoning the bad solutions that you keep complaining about.\n\n| That's not a good analogy because Lisp is a lot more like playing than\n| like doing civil engineering.\n\n  I'm glad you show me I was right in judging you to be an RUA person, but\n  really, don't you think I spent all that time with a glimmer of hope that\n  you might recognize how RIA people _differ_ from yourself in what I\n  wrote?\n\n  time for the lament of the day: it is so often such a terrible _waste_ to\n  write anything non-mundane to this newsgroup it's truly _exasperating_.\n  the only thing you fucking dolts care about is whether people use nice\n  words or bad, and then if you get nice, approved words, your brains seal\n  shut with \"oh, it's nothing dramatically new, so I'll just lull myself\n  into my cozy old stupidity and enjoy the peace and quiet from not having\n  to listen to anyone\".  I get _sick_ of such idiocy and stupidity!  many\n  of you guys seem to want it more than anything else, and some even go out\n  of their way to _encourage_ nice and cozy, non-threatening stupidity.\n\n  you, in particular, don't know much about programming, Mr. anonymous not\n  for e-mail at not for spam dude, so it would help a lot if you didn't\n  pretend you did and that you didn't tell people who have outgrown your\n  childish approach to programming _decades_ ago about how you have _not_\n  understood that this here programming thing is _not_ about playing in a\n  sandbox.  a few people have tried to share their experience with you, and\n  you just reject them because you refuse to believe that there's anything\n  beyond toy code (by our measures, not yours).\n\n#:Erik, actually irritated, for once\n\n",
  "date": "2000-03-04",
  "author": "Erik Naggum",
  "references": [],
  "source": "naggum"
}