{
  "url": "https://www.xach.com/naggum/articles/3160942638240195@naggum.no.html",
  "id": "3160942638240195@naggum.no",
  "title": "Re: A modest proposal (long)",
  "content": "\nSubject: Re: A modest proposal (long)\nFrom: Erik Naggum <erik@naggum.no>\nDate: 2000/03/01\nNewsgroups: comp.lang.lisp\nMessage-ID: <3160942638240195@naggum.no>\n\n* Erann Gat\n| I see I have not made myself clear.\n\n  I see no evidence of that.  I think we have a fairly good understanding\n  of your issue.  all the silly syntax detracted from its delivery, but\n  you've been clear enough.\n\n| We are already using a typographical convention to distinguish lexical\n| and special variables.  We already know that we get into trouble when we\n| don't adhere to that convention.  Why not move the burden of applying\n| that convention from the programmer to the compiler?\n\n  because we would want to make our own conventions in code where it is\n  safe to make them.  and people don't _actually_ get into trouble in the\n  first place, except the first few days they are confused about this.\n\n| I also wonder how many of you BIND haters are also LOOP haters.  I am\n| really beginning to worry that people have lost sight of the fact that\n| an S-expression with just one level of parens is still an S-expression.\n\n  no need to worry about that.  I like loop, I don't if*, and I don't like\n  your bind or any of the numerous other _gratuitous_ syntax-heavy ideas\n  people seem to get with an alarming regularity whenever they see a need\n  for some miniscule improvement to the language.  it's as if they don't\n  like simple syntax to begin with, and rush to solve any semantic issue\n  with syntax.  I find this disturbing, but nonetheless indicative of\n  something much more important: the language changers don't really grok\n  Common Lisp.\n\n| But symbol macros can only be established with lexical scope, so if\n| there is a symbol macro it must be lexically manifested.  Global symbol\n| macros would be truly problematic.\n\n  take a look at define-symbol-macro some day and weep, then.  I love the\n  fact that we have global symbol macros!  I also love the fact that we\n  have constants, which also causes pervasive differences in behavior, and\n  there's no truly established convention for them.  I happen to think that\n  special variables is one of Common Lisp's truly great idea.  what I want,\n  in response to your \"it's EVIL!\" is a programmatic means to query the\n  system for the status of a symbol.  `describe' and friends help me as a\n  user who gawks at the screen, but that is clearly insufficient.\n\n  again, there is a need to change the language to make it more amenable to\n  beginners and experienced users alike: unlike all other languages now in\n  current and widespread use, Common Lisp violates the notion that what you\n  see is what you get with respect to the _names_ of the symbols.  if\n  symbol-value is such a problem for beginners that it needs language-smith\n  attention, wouldn't you be interested in solving a _real_ problem that\n  would have far-reaching consequences for our interoperability with other\n  languages, other textbooks, other people?  it's not a question of case,\n  it's a matter of making (setf (readtable-case *readtable*) :preserve)\n  work the way people _actually_ expect it to.  think about it.  please.\n\n#:Erik\n\n",
  "date": "2000-03-01",
  "author": "Erik Naggum",
  "references": [],
  "source": "naggum"
}