{
  "url": "https://www.xach.com/naggum/articles/3159028659830535@naggum.no.html",
  "id": "3159028659830535@naggum.no",
  "title": "Re: Interned Symbols and GC",
  "content": "\nSubject: Re: Interned Symbols and GC\nFrom: Erik Naggum <erik@naggum.no>\nDate: 2000/02/08\nNewsgroups: comp.lang.lisp\nMessage-ID: <3159028659830535@naggum.no>\n\n* Christian Lebiere <cl@andrew.cmu.edu>\n| For better or worse, our application generates lots of interned symbols.\n\n  well, if you don't use the Lisp reader to find symbols by name, there are\n  always a number of available solutions better than using interned\n  symbols.  if, say, you only use symbols as unique keys, but whose name\n  does not actually matter, a fresh cons cell like (nil . nil) may be used\n  as long as you keep the key around someplace else.  if the name matters,\n  you can also use a string.\n\n| MCL seems to garbage-collect interned symbols after a while when they are\n| no longer referenced (which hasn't caused a problem so far), while\n| Allegro CL seems to keep them around forever (which causes it to bog down\n| and crash if given enough time).\n| \n| I have a couple of questions:\n| \n| 0) Is the above description accurate?\n\n  no.  an interned symbol is ipso facto referenced -- by the very package\n  in which it is interned!\n\n  moreover, whether a symbol is \"useless\" or not is not determined by what\n  references the symbol, but by what the symbol references -- quite the\n  opposite of your concern.  the whole point with an interned symbol is\n  that it holds onto some values and that there might be a reference to\n  those values in the future through the symbol by its name read from an\n  outside source, so _clearly_ we can't chuck interned symbols -- it would\n  defeat the fundamental purpose of symbols.  (aggressive short-sightedness\n  is required to label this fact \"unfortunate\", as some evidently do.)\n  \n| 1) What is the correct behavior, if there is one (CLTL2 has little to say)?\n\n  since MCL is clearly in the wrong as you have described it, I'm inclined\n  to think that something else is at work.\n\n  btw, CLtL2 is no longer _the_ language reference.  use the HyperSpec (or\n  the standard).\n \n| 2) Is there a way to get rid of interned symbols that are no longer\n| needed that is safer and more efficient than to explicitely unintern them\n| individually?\n\n  DELETE-PACKAGE gets rid of the last reference to interned symbols that\n  have no references, for all symbols in that package.   you could always\n  copy the symbols you need to a new package, and do your own copying\n  garbage collection that way.\n\n  iterators over symbols are allowed to unintern the symbol it looks at.\n  you may want to use DO-SYMBOLS over the symbols in a package to get rid\n  of the ones you don't need.\n\n\n  it sounds as if what you _really_ want is a weak hash table that you\n  index with _some_ unique key, as outlined at the start of this message.\n\n#:Erik\n\n",
  "date": "2000-02-08",
  "author": "Erik Naggum",
  "references": [],
  "source": "naggum"
}