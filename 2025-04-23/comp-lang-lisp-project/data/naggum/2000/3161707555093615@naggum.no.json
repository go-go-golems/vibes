{
  "url": "https://www.xach.com/naggum/articles/3161707555093615@naggum.no.html",
  "id": "3161707555093615@naggum.no",
  "title": "Re: newbie Lisp question",
  "content": "\nSubject: Re: newbie Lisp question\nFrom: Erik Naggum <erik@naggum.no>\nDate: 2000/03/10\nNewsgroups: comp.lang.lisp\nMessage-ID: <3161707555093615@naggum.no>\n\n* Tim Bradshaw <tfb@cley.com>\n| But I think that there *are* advantages to case-insensitive readers.\n| Specifically, case-sensitive languages seem to be vulnerable to the\n| drEadEd studlycaps vIrUs.  C seems to be badly infected with this despite\n| having grown up with powerful Unix antibodies, and I think C++ was born\n| with it (Java too I guess).\n\n  the studlycaps infection is a serious issue.  however, I think it grew\n  out of the stupid way symbols are constructed in some languages, with a\n  fixed set of characters available in symbol names and everything else\n  being \"parsed\" as operators and whatnot, causing people to get scared of\n  anything that looks like blank spaces.  underscores, in particular, are\n  used much like \"visible blanks\", but they look so ugly it's no wonder\n  people don't use them.  if you aren't afraid of what might look like an\n  operator, foo-bar-zot beats foo_bar_zot hands down any day, but if you\n  are afraid of operator look-alikes, you need fooBarZot to feel \"safe\".\n\n| While I appreciate that CL probably does need to talk with these infested\n| languages, and thus presumably will in due course become fully studly\n| itself, I find the prospect sad.\n\n  I don't think this will happen, but I think it's _less_ likely to happen\n  with a lower-case Lisp than an upper-case Lisp.  the reason may seem\n  counter-intuitive, but here goes: in an upper-case Lisp, getting symbols\n  right is just too difficult for mere mortals (more so when using anything\n  other than readtable-case :upcase), so to get them right, people resort\n  to various hacks, the _best_ of which is using strings to refer to the\n  foreign object and a symbol to hold onto the reference in the Lisp world,\n  but that's comparatively inconvenient, and the symbol won't be _created_\n  from the foreign name, for the obvious reasons.  in a lower-case Lisp,\n  you _may_ use the symbol directly, but now it has disadvantages that you\n  can see, because they aren't overshadowed by the _disadvantages_ of\n  case-mangling in Common Lisp, so you can see the _advantages_ of using\n  strings to name foreign objects with funny names, _plus_ you get the\n  predictable results when you try to create the symbol-name yourself.\n  thus, an upcasing Lisp will present self-defeating inconveniences that\n  completely destroy the advantages of case-insensitivity, while a case-\n  preserving lower-case Lisp will present _encouragement_ to use the much\n  richer set of available symbol names, instead of the stupid names that\n  particularly Windowsized C++ use to look like mangled symbol names even\n  before the C++ mangler gets at them.\n\n#:Erik\n\n",
  "date": "2000-03-10",
  "author": "Erik Naggum",
  "references": [],
  "source": "naggum"
}