{
  "url": "https://www.xach.com/naggum/articles/3162901564202112@naggum.no.html",
  "id": "3162901564202112@naggum.no",
  "title": "Re: new to lisp (3rd time lucky)",
  "content": "\nSubject: Re: new to lisp (3rd time lucky)\nFrom: Erik Naggum <erik@naggum.no>\nDate: 2000/03/24\nNewsgroups: comp.lang.lisp\nMessage-ID: <3162901564202112@naggum.no>\n\n* Natalia <nati@one.net.au>\n| lisp is frying my brain, i think i will stick to\n| subjects that program in c from now on.\n\n  well, take it from an old hand: the only reason it would be easier to\n  program in C is that you can't easily express complex problems in C, so\n  you don't.  I have 17 years of C programming experience, and I'm damn\n  good at it, but that's also _why_ I program in Common Lisp.  but perhaps\n  you need a few years of C programming to appreciate better languages -- I\n  have repeatedly said that programmers graduate into Common Lisp as they\n  tire of inferior languages.  however, getting too good at something that\n  is not good for you is _really_ bad for you, as it means you'll have to\n  accept a temporary reduction in living standards if you switch, and lots\n  of hard work on the side with little or no pay if you decide to combine\n  the two.  therefore, another saying: life is too long to be good at C/C++.\n\n  it is probably C that _has_ fried your brain, by the way.  not that this\n  will comfort you or anything, but note that if you are used to C, the\n  utter pointlessness of most of the exercises in recursion that Lisp and\n  Scheme teachers tend to push on unsuspecting students become so glaringly\n  visible that you would never even think of recursion again, even when it\n  is clearly the best solution.  this doesn't mean that recursion is bad,\n  it only means that iteration is better in a lot of cases where recursion\n  adds nothing to the understanding of the task at hand.  the lesson to be\n  learned from this is that giving exercises in the proper use of recursion\n  is much harder than giving lessons in the proper use of iteration, and\n  indeed requires a much deeper understanding of the problems for which\n  recursion is the optimal solution, both in terms of what you describe to\n  the intelligent programmer and what you execute on the hardware.\n\n  e.g., in your current problem, it is obviously a lot smarter to iterate\n  over a list than to recurse over it (despite what your teachers may tell\n  you about the \"instructiveness\" of such endeavors), yet you must recurse\n  if and when the element in the list is itself a list, and that's the\n  valuable part of the exercise.\n\n#:Erik\n\n",
  "date": "2000-03-24",
  "author": "Erik Naggum",
  "references": [],
  "source": "naggum"
}