{
  "url": "https://www.xach.com/naggum/articles/3160252167384001@naggum.no.html",
  "id": "3160252167384001@naggum.no",
  "title": "Re: More Scope...",
  "content": "\nSubject: Re: More Scope...\nFrom: Erik Naggum <erik@naggum.no>\nDate: 2000/02/22\nNewsgroups: comp.lang.lisp\nMessage-ID: <3160252167384001@naggum.no>\n\n* Robert Munyer <munyer@mcs.com>\n| P.S.  A couple of years ago I had an exasperating flame war with Erik\n| over a question very similar to this one.  I eventually won the war, by\n| finding an excerpt from the HyperSpec that demonstrated the exact\n| opposite of Erik's main technical argument.\n\n  August 1996.  I think comp.lang.lisp readers deserve the opportunity to\n  read the discussion for themselves, not the least to understand why\n  Robert's self-serving summary is _still_ his position, and why it is\n  still important that he be shot down, because he's _still_ wrong, nearly\n  four years later.\n\n  the following \"power search\" line lists them from www.deja.com:\n\n~g comp.lang.lisp ~dc {1996/08/01 1996/09/30} ~s {EVAL implementations}\n\n  the original question was why (let ((x 10)) (eval 'x)) produces different\n  results before and after a special declaration of x.  this stumps newbies\n  at times, but it can be explained easily and well unless you get it wrong.\n\n  so the problem with that debate was that Robert insisted on bringing up a\n  *huge* number of *tiny* arguments.  Robert _did_ field a war over quibbly\n  little details, while everybody else were either trying to unconfuse him,\n  calm him down, or putting in their earplugs.  naturally, winning this war\n  meant nobody made the effort to respond to more of the same old rants.\n\n  my _main_ argument was that Common Lisp doesn't have a concept of \"global\n  variables\", but lexical and dynamic _bindings_, and lexical and global\n  symbol _references_ (explained in various bits and pieces -- the whole\n  discussion helped clarify the issues for me).  Robert's main point was\n  that you could have a lexical and a dynamic variable with the same name.\n  he's right (and I _never_ disagreed with him on it, because it is wholly\n  irrelevant): the latter is called the symbol-value of a symbol that has\n  _not_ been declared special, because a reference to a variable that is\n  not lexical is identical to symbol-value of the symbol naming it.  as\n  most confused people who are right, Robert was right for wrong reasons:\n  he didn't understand the distinction between binding and references to\n  variables.  apparently, he learned nothing from the whole exercise.\n\n  here's an excerpt I think highlights exactly why Robert is _still_ upset:\n\n> (part of) Robert's answer was wrong, relied on implementation specifics\n> at best, and is no better off after his attempted rescue missions.  end\n> of story.\n\nWait a minute.  STOP DOING THAT!  It is rude and offensive.  You keep\nsaying that part of my answer was wrong somehow, without specifying how.\nEvery time I challenge you to be specific you just post another article\nsaying (or implying) that I made some vague, unspecified error.  That is\nnot a reasonable way to debate.  In Usenet you are not supposed to simply\nstate that someone is wrong; you are supposed to explain WHY he or she is\nwrong so that everyone can benefit.\n\n  I clearly fell short of his expectations.  of course that's _my_ fault.\n\n  incidentally, Robert's parting words to us were as follows:\n\nThe standard example code above makes it absolutely clear that SETQ does\nnot, and must not, proclaim a symbol to be special.\n\n  no wonder it didn't really feel good to part on this winning note: it's\n  not a winning note.  it's an admission of not remembering from early\n  warnings in the same discussion that examples are not even considered\n  part of the standard, for the very simple reason that the requirements\n  have to be _uniquely_ authoritative.\n\n  so the \"excerpt from the HyperSpec that demonstrates the exact opposite\n  of Erik's main technical point\" is simply a lie -- but it's the kind you\n  win wars with, because people normally let you think you won when you say\n  something sufficiently stupid and gloat and brag about it to boot.\n  \n#:Erik\n\n",
  "date": "2000-02-22",
  "author": "Erik Naggum",
  "references": [],
  "source": "naggum"
}