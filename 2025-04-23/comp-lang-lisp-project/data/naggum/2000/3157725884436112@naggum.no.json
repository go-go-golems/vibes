{
  "url": "https://www.xach.com/naggum/articles/3157725884436112@naggum.no.html",
  "id": "3157725884436112@naggum.no",
  "title": "Re: Transmeta's Crusoe as a host for neo-Lispm, or not?",
  "content": "\nSubject: Re: Transmeta's Crusoe as a host for neo-Lispm, or not?\nFrom: Erik Naggum <erik@naggum.no>\nDate: 2000/01/24\nNewsgroups: comp.lang.lisp\nMessage-ID: <3157725884436112@naggum.no>\n\n* Tim Bradshaw <tfb@cley.com>\n| OK, from all this I get:\n| \n| \tWe can design a lisp processor which will run Lisp about 5x as fast\n| \tas a pentium will run C, at the same clock rate.  And if the market\n| \twas equivalently large, this chip would cost about the same as a\n| \tpentium.\n| \n| This is a conclusion that I find very uncomfortable indeed.  As far as I\n| can see this means either that, in some deep sense, Lisp is a language\n| which can be made to go much faster than C, or that in fact the pentium\n| is a very poor `C machine', and much faster C machines could be designed.\n| Neither option seems very likely to me.\n\n  once upon a time, when ANSI C was fairly young and compilers for the\n  language were new enough to be simple enough for me to understand, I\n  spent a fair amount of time studying then-current processors and how they\n  would optimally \"represent\" C.  it turns out that C was a good language\n  back when PDP-11 was a good processor.  C has sucked since then, more and\n  more so over the years.  today, C is probably the crappiest language you\n  can possibly find, made worse only by its \"improvement\", C++.  neither\n  has a snowball's chance in hell of being compiled into _optimal_ machine\n  code on modern processors.  the language itself is so low-level it tries\n  to run on a \"virtual\" processor that only to the untraied eye looks like\n  modern processors.\n\n  I recently had the opportunity to study the Pentium III from the inside,\n  and I was positively amazed by what the Intel guys have managed to hide\n  behind that god-awful instruction set they have to be compatible with.\n  it's good stuff, and it isn't being used because people are still stuck\n  on the 386 and refuse to compile programs for 686s.\n\n  if you actually _used_ the Pentium III architecture for Lisp, you'd truly\n  run rings around C, but since Lisp vendors, too, tend to stay with what\n  is likely to sell well, you can't ask people to upgrade to 600MHz PIIIs\n  just to get that super performance over C when C is doing \"adequately\" on\n  a 133MHz PPro.  this _actually_ means that the performance gain for C is\n  much smaller than the performance gain for Lisp, it is taken to mean that\n  the _processors_ wouldn't provide that much performance gain for Lisp,\n  either, considering the mind-bogglingly uintelligent conflation of C with\n  \"optimal hardware performance\".\n\n  C and C++ are firmly stuck in the early 80's as far as processor design\n  is concerned.  Common Lisp never was stuck anywhere in the first place,\n  which means it has had a hard time sticking to something in particular,\n  as well, but at least it has the uncommon ability to let go.\n\n  the task of good programmers everywhere is to get rid of C, or, more\n  precisely, the C mindset and the gravely mistaken notion that C is\n  somehow \"inherently efficient\".\n\n#:Erik\n\n",
  "date": "2000-01-24",
  "author": "Erik Naggum",
  "references": [],
  "source": "naggum"
}