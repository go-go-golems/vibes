{
  "url": "https://www.xach.com/naggum/articles/3157825117110563@naggum.no.html",
  "id": "3157825117110563@naggum.no",
  "title": "Re: reading/writing bytes smaller than 8 bits?",
  "content": "\nSubject: Re: reading/writing bytes smaller than 8 bits?\nFrom: Erik Naggum <erik@naggum.no>\nDate: 2000/01/25\nNewsgroups: comp.lang.lisp\nMessage-ID: <3157825117110563@naggum.no>\n\n* \"Bruce L. Lambert\" <lambertb@uic.edu>\n| When I write n (unsigned-byte 4)s to my file-system (solaris 2.6 on a\n| sparc clone), and then I say ls -l to look at the size of the file, there\n| are n bytes in the file rather than n/2 as I would have expected.\n\n  why did you expect that?\n\n| Does this mean the file system can write nothing smaller than an 8-bit\n| byte?\n\n  the file system has nothing to do with it.  Unix doesn't know about file\n  contents at all, and as an operating system design, takes significant\n  pride in that fact.\n\n| If so, does this in any way affect what happens when I read an\n| (unsigned-byte 4) from the same file.\n\n  if you write (unsigned-byte 4) to a file and read it again, you should\n  get the exact same values back.  how these bits are stored is none of\n  your business.\n\n  if your expectations can be defended and you have reason to use this\n  feature to obtain improved storage performance, talk with your CL vendor\n  and have them make it work for you.\n\n| I've played with this some, and the values appear to be correct, but I'm\n| still wondering what's happening 'below the surface'.\n\n  the only people who can really answer that question is the person who\n  implemented the feature in your Common Lisp implementation.  finding that\n  person may be hard, but if you use free software, the source is there.\n  if not, you should use the customer support facilities of the vendor.\n\n| Is it still the case that an array of n 4-bit bytes will occupy (roughly)\n| n/2 bytes of main memory when loaded into lisp?\n\n  if it makes performance sense to do so, or people have argued for this\n  feature even if it didn't, it will.  you can, however, easily measure the\n  space costs of an allocation.  for instance,\n\n(time (make-array 1000 :element-type '(unsigned-byte 4) :initial-element 0))\n; cpu time (non-gc) 0 msec user, 0 msec system\n; cpu time (gc)     0 msec user, 0 msec system\n; cpu time (total)  0 msec user, 0 msec system\n; real time  14 msec\n; space allocation:\n;  9 cons cells, 0 symbols, 512 other bytes, 0 static bytes\n=> #(0 0 0 0 0 0 0 0 0 0 ...)\n(4) cl-user\n(time (make-array 1000 :element-type '(unsigned-byte 8) :initial-element 0))\n; cpu time (non-gc) 0 msec user, 0 msec system\n; cpu time (gc)     0 msec user, 0 msec system\n; cpu time (total)  0 msec user, 0 msec system\n; real time  0 msec\n; space allocation:\n;  9 cons cells, 0 symbols, 1,016 other bytes, 0 static bytes\n=> #(0 0 0 0 0 0 0 0 0 0 ...)\n(5) cl-user\n(time (make-array 1000 :element-type '(unsigned-byte 2) :initial-element 0))\n; cpu time (non-gc) 0 msec user, 0 msec system\n; cpu time (gc)     0 msec user, 0 msec system\n; cpu time (total)  0 msec user, 0 msec system\n; real time  0 msec\n; space allocation:\n;  9 cons cells, 0 symbols, 512 other bytes, 0 static bytes\n=> #(0 0 0 0 0 0 0 0 0 0 ...)\n(6) cl-user\n(time (make-array 1000 :element-type '(unsigned-byte 1) :initial-element 0))\n; cpu time (non-gc) 0 msec user, 0 msec system\n; cpu time (gc)     0 msec user, 0 msec system\n; cpu time (total)  0 msec user, 0 msec system\n; real time  0 msec\n; space allocation:\n;  9 cons cells, 0 symbols, 144 other bytes, 0 static bytes\n=> #*0000000000.. ; [abbreviated by me]\n(7) cl-user\n(time (make-array 1000 :element-type '(unsigned-byte 16) :initial-element 0))\n; cpu time (non-gc) 0 msec user, 0 msec system\n; cpu time (gc)     0 msec user, 0 msec system\n; cpu time (total)  0 msec user, 0 msec system\n; real time  0 msec\n; space allocation:\n;  9 cons cells, 0 symbols, 2,016 other bytes, 0 static bytes\n=> #(0 0 0 0 0 0 0 0 0 0 ...)\n\n  the reported results show the storage strategies and optimizations for\n  various data types.\n\n#:Erik\n\n",
  "date": "2000-01-25",
  "author": "Erik Naggum",
  "references": [],
  "source": "naggum"
}