{
  "url": "https://www.xach.com/naggum/articles/3162005254869991@naggum.no.html",
  "id": "3162005254869991@naggum.no",
  "title": "Re: Testing approaches",
  "content": "\nSubject: Re: Testing approaches\nFrom: Erik Naggum <erik@naggum.no>\nDate: 2000/03/14\nNewsgroups: comp.lang.lisp\nMessage-ID: <3162005254869991@naggum.no>\n\n* Ray Blaak <blaak@infomatch.com>\n| For example, how many kinds of invalid values can you pass to a function?\n| A string, an atom, a list, a vector, a float, an integer,... If your\n| function was restricted to integers, say, then you could simply\n| concentrate on the invalid integer values.\n\n  (check-type <argument> <restricted-type>) takes care of this one for you,\n  or you can use assert or throw your own errors if you really have to.  I\n  don't see the problem.  writing safe code isn't hard in Common Lisp.\n\n| Static typing is dramatically useful in integration tests.  A unit test\n| will not exhaustively exercise other units.  Static typing allows units\n| to fit together without the piles of dumb stupid interface errors,\n| allowing you to concentrate on the smart stupid logic errors :-).\n\n  when the compiler stores away the type information, this may be true.\n  when the programmers have to keep them in sync manually, it is false.\n\n  static typing is like a religion: it has no value outside the community\n  of believers.  inside the community of believers, however, it is quite\n  impossible to envision a world where static types do not exist, and they\n  think in terms that restrict their concept of \"type\" to that which fits\n  the static typing religion.\n\n  to break out of the static typing faith, you have to realize that there\n  is nothing conceptually different between an object of type t that holds\n  a value you either know or don't know how to deal with, and an object of\n  a very narrow type that holds a value you either know or don't know how\n  to deal with.  the issue is really programming pragmatics.  static typing\n  buys you exactly nothing over dynamic typing when push comes to shove.\n  yes, it does buy you something _superficially_, but look beneath it, and\n  you find that _nothing_ has actually been gained.  the bugs you found are\n  fixed, and the ones you didn't find aren't fixed.  the mistakes you made\n  that escaped the testing may differ very slightly in expression, but they\n  are still there.  the mistakes you did find may also differ slightly in\n  expression, but they are still gone.  what did you gain by believing in\n  static typing?  pain and suffering and a grumpy compiler.  what did you\n  gain by rejecting this belief and understanding that neither humans nor\n  the real world fits the static typing model?  freedom of expression!  of\n  course, it comes with a responsibility, but so did the static typing,\n  only the dynamic typing responsibility is not to abuse freedom, while the\n  static typing responsibility is not to abuse the power of restriction.\n\n  personally, I think this is _actually_ a personality issue.  either you\n  want to impose control on your environment and believe in static typing,\n  or you want to understand your environment and embrace whatever it is.\n\n#:Erik\n\n",
  "date": "2000-03-14",
  "author": "Erik Naggum",
  "references": [],
  "source": "naggum"
}