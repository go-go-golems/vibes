{
  "url": "https://www.xach.com/naggum/articles/3161052909493352@naggum.no.html",
  "id": "3161052909493352@naggum.no",
  "title": "Re: A modest proposal (long)",
  "content": "\nSubject: Re: A modest proposal (long)\nFrom: Erik Naggum <erik@naggum.no>\nDate: 2000/03/03\nNewsgroups: comp.lang.lisp\nMessage-ID: <3161052909493352@naggum.no>\n\n* Russell Wallace <manorsof@iol.ie>\n| Can you give a reference to this, or summarize the argument in question?\n\n  Pierre R. Mai relieved me (thanks!) of searching for the articles where\n  Kent has made this point, but my understanding of this issue is that any\n  language that has the ability to do non-local transfers of control needs\n  a mechanism to ensure that invariants and pre- and post-conditions are\n  maintained even across them.  that is, _if_ you care about maintaining\n  invariants and pre- and post-conditions (which could collectively be\n  thought of the very sanity of your code), and that's where I extend this\n  argument to apply to programmers.  most modern languages now have several\n  sometimes _very_ powerful means of non-local transfers of control, such\n  as exception handling.  outside of Common Lisp, none of them make sanity\n  maintenance convenient, what with all the declarations and \"try\" blocks\n  and everything.  a programmer who doesn't care about the sanity of his\n  code and doesn't even pause to consider the consequences of modifying the\n  state of a global variable (and they do exist, regardless of what people\n  think or do to avoid them -- consider data on disk the ultimate in global\n  variables) should just not be programming anything that has side effects.\n  and the more we think about this, the more we want heavy-duty transaction\n  processing and committing blocks of changes at a time, with roll-back and\n  journaling and all that nifty stuff that the database people have figured\n  out and automatized for their programmers.  unwind-protect is a similar\n  concern for the sanity of code and data.  and binding special variables\n  without needing unwind-protect to set and restore the values of otherwise\n  mere global variables is on par with automatized transaction processing\n  in terms of programmer convenience.  now somebody wants to take that\n  convenience away from us with more verbose syntax and added hairiness to\n  the language.  consider what database programmers would think about a\n  proposal to have to be _explicit_ about every transaction processing step\n  _all_ the time.  that's how good programmers should react to any measure\n  to abridge the usefulness and convenience of special variables.\n\n#:Erik\n\n",
  "date": "2000-03-03",
  "author": "Erik Naggum",
  "references": [],
  "source": "naggum"
}