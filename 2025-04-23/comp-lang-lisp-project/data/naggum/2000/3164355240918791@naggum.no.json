{
  "url": "https://www.xach.com/naggum/articles/3164355240918791@naggum.no.html",
  "id": "3164355240918791@naggum.no",
  "title": "Re: Deep copy in lisp: how?",
  "content": "\nSubject: Re: Deep copy in lisp: how?\nFrom: Erik Naggum <erik@naggum.no>\nDate: 2000/04/10\nNewsgroups: comp.lang.lisp\nMessage-ID: <3164355240918791@naggum.no>\n\n* Courageous <jkraska1@san.rr.com>\n| Never had that happen is all of 3 years using the code generator that I\n| had, which would, in fact, copy wildly crazy and cyclic graphs of objects\n| perfectly correctly.\n\n  that's a ridiculously bold statement.  how do you _know_?  would you even\n  have _seen_ an error if it occurred?\n\n| Furthermore, if you look into the world of object oriented databases,\n| you'll find that various oodbs also do this perfectly well.\n\n  they do it by restricting the domain to fit what they implement, but it\n  fits the C++ mind-set to think this way and take it for granted that\n  others will understand that \"of _course_ we don't do the hard stuff\".  in\n  this newsgroup and in Lisp, the trivial problems are uninspiring, and so\n  we tend to think in broader terms.  this means that arbitrary limits are\n  regarded as cheating, unless yo present the limited domain up front as\n  inherent engineering decisions.  did you do that?  no.  foo on you for\n  that.\n\n| Perhaps we're having a definition of terms problem?\n\n  yes, you come from the C++ world.  C++ people are extremely arrogant the\n  way they think they invented object-orientedness.  they didn't, OK?  C++\n  doesn't even touch upon the really hard areas.  you have to face this\n  fact, or you'll make more ridiculously bold statements that reflect very\n  badly on your ability to deal with complexity.\n\n| I can't write a specific graph copier, because I don't have a- priori\n| knowledge of the structure of the objects that I will be copying.\n\n  at issue is knowing the _intent_ of the slots, not which they are.  in\n  Common Lisp we have the MOP to ask for the structure of the objects.\n  piece of cake, really.  just like databases can report on such things.\n  it doesn't help one bit in deciding whether to make a shallow or deep\n  copy, though.\n\n#:Erik\n\n",
  "date": "2000-04-10",
  "author": "Erik Naggum",
  "references": [],
  "source": "naggum"
}