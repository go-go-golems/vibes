{
  "url": "https://www.xach.com/naggum/articles/3162824624300417@naggum.no.html",
  "id": "3162824624300417@naggum.no",
  "title": "Re: Building a \"loadable\" tar file.",
  "content": "\nSubject: Re: Building a \"loadable\" tar file.\nFrom: Erik Naggum <erik@naggum.no>\nDate: 2000/03/23\nNewsgroups: comp.lang.lisp\nMessage-ID: <3162824624300417@naggum.no>\n\n* Marco Antoniotti <marcoxa@parades.rm.cnr.it>\n| 1 - Yes.  I'd like LOAD to recognize a file which was the result of a\n|     collection operation of many fasl files, and \"do the right\" thing\n|     with it.\n| \n| 2 - This would require a change in the standard.\n\n  huh?  why is this?\n\n| 3 - Some CL implementations allow you to actually 'cat' fasl files\n|     together for the benefit of LOAD.\n\n  if we regard a Common Lisp source file as a sequence of individual\n  top-level forms that does not know about file boundaries between them,\n  you can easily concatenate source files and end up with something that\n  can be loaded as a unit.  if we regard the compiled fasl files the same\n  way, and this can obviously be done if each top-level form is saved to\n  disk individually, possibly including some file-specific prologue that is\n  generated by the compiler, there really is nothing special involved in\n  concatenating files.\n\n  if you can load from a stream, you can load from a concatenated-stream,\n  so there should already be support in the standard for the whole concept.\n\n#:Erik\n\n",
  "date": "2000-03-23",
  "author": "Erik Naggum",
  "references": [],
  "source": "naggum"
}