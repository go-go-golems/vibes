{
  "url": "https://www.xach.com/naggum/articles/3162302923332864@naggum.no.html",
  "id": "3162302923332864@naggum.no",
  "title": "Re: strings and characters",
  "content": "\nSubject: Re: strings and characters\nFrom: Erik Naggum <erik@naggum.no>\nDate: 2000/03/17\nNewsgroups: comp.lang.lisp\nMessage-ID: <3162302923332864@naggum.no>\n\n* Barry Margolin <barmar@bbnplanet.com>\n| But if you want a type that can hold any character, you can create it with:\n| \n| (make-string length :element-type 'character)\n\n  no, and that's the crux of the matter.  this used to be different from\n\n(make-string length :element-type 'string-char)\n\n  in precisely the capacity that you wish is still true, but it isn't.\n  when the type string-char was removed, character assumed its role in\n  specialized arrays, and you could not store bits and fonts in strings any\n  more than you could with string-char.  to do that, you need arrays with\n  element-type t.\n\n  but I'm glad we've reached the point where you assert a positive, because\n  your claim is what I've been trying to tell you guys DOES NOT HOLD.  my\n  claim is: there is nothing in the standard that _requires_ that there be\n  a specialized array with elements that are subtypes of character (i.e., a\n  member of the union type \"string\") that can hold _all_ character objects.\n\n  can you show me where the _standard_ supports your claim?\n\n| In fact, you don't even need the :ELEMENT-TYPE option, because CHARACTER is\n| the default.\n\n  sure.  however, I'm trying to penetrate the armor-plated belief that the\n  resulting string is REQUIRED to retain non-null implementation-defined\n  attributes if stored into it.  no such requirement exists: a conforming\n  implementation is completely free to provide a single string type that is\n  able to hold only simple characters.  you may think this is a mistake in\n  the standard, but it's exactly what it says, after the type string-char\n  was removed.\n\n  methinks you're stuck in CLtL1 days, Barry, and so is this bad imitation\n  jerk from Harlequin, but that's much less surprising.\n\n#:Erik\n\n",
  "date": "2000-03-17",
  "author": "Erik Naggum",
  "references": [],
  "source": "naggum"
}