{
  "url": "https://www.xach.com/naggum/articles/3159133748798780@naggum.no.html",
  "id": "3159133748798780@naggum.no",
  "title": "Re: Why no standard foreign language interface?",
  "content": "\nSubject: Re: Why no standard foreign language interface?\nFrom: Erik Naggum <erik@naggum.no>\nDate: 2000/02/10\nNewsgroups: comp.lang.lisp\nMessage-ID: <3159133748798780@naggum.no>\n\n* Robert Posey <muddy@raytheon.com>\n| Because if the standard has a standard interface, I could move the LISP\n| code to a new machine without change.\n\n  no, you couldn't.  think again.  whether you can move your code without\n  change depends vastly more on the code to which you interface than the\n  code that describes the interface.\n\n| In addition, commonly needed low level language routines could be reused\n| as well.\n\n  pardon me, but this is wishful thinking bordering on nonsense.  have you\n  ever tried to port _any_ code between disparate machines and operating\n  systems?  have you seen how much work it takes to make C code export a\n  portable interface?\n\n\n  what you need is a tool that can take C (or whatever) source code and\n  automatically produce the foreign function interface glue code that your\n  Common Lisp implementation needs.  why even _think_ about such a silly\n  thing as writing all the foreign function interface definitions by hand?\n\n  this cry for a standard foreign function interface stuff is just plain\n  stupid.  it detracts from the real answer in a really big way, because\n  people can be sooo content to sit on their fat asses and whimper about\n  the standard being mean and cheap and not giving them what they sorely\n  \"need\", while the real solution is waiting very patiently for somebody to\n  just stop staring at the stupid non-solutions and whining and whimpering,\n  and just freaking _do_ it.\n\n  believe me, once you can figure out the braindamaged syntax of all these\n  stupid infix languages with a plethora of static types and other junk\n  enough to do the necessary steps of (1) writing wrapper code in that same\n  language or in C that is more friendly to a Common Lisp interface, and\n  (2) knowing enough to write foreign function interface code in Common\n  Lisp, producing output that fits one of umpteen different foreign\n  function interface definition \"languages\" for various Common Lisp\n  implementations is _really_ trivial.\n\n#:Erik\n\n",
  "date": "2000-02-10",
  "author": "Erik Naggum",
  "references": [],
  "source": "naggum"
}