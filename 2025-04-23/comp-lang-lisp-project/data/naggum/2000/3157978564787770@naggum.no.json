{
  "url": "https://www.xach.com/naggum/articles/3157978564787770@naggum.no.html",
  "id": "3157978564787770@naggum.no",
  "title": "Re: Lisp and Scheme.....",
  "content": "\nSubject: Re: Lisp and Scheme.....\nFrom: Erik Naggum <erik@naggum.no>\nDate: 2000/01/27\nNewsgroups: comp.lang.scheme,comp.lang.lisp\nMessage-ID: <3157978564787770@naggum.no>\n\n* Chung-Lin Tang <u8832022@cc.nctu.edu.tw>\n| How much does Lisp and Scheme differ?\n\n  completely.  two completely different cultures, two completely different\n  measures of success, two completely different concepts of elegance and\n  usability, two completely different sets of semantics for superficially\n  similar forms of expression.  as languages, they have less in common than\n  Ada and Perl.  as user communities, only the Scheme people believe that\n  they are using a Lisp, based on the belief that retaining parentheses and\n  prefix form is enough to remain a Lisp -- and, of course, the desire in\n  the Scheme community to convert people to their pure religion, a desire\n  you won't find in any other Lisp-derived community, especially not those\n  of the languages who have any purity to boast about.  Scheme has the\n  world's most elegant, yet closed, language specification, while the other\n  Lisp family members focus on elegant language _use_ and _extension_.\n\n  while this may be taken as an exaggeration, it's less of an exaggeration\n  than the ignorant opinion that these languages are substantially the same.\n\n  Scheme is worth learning well -- no other language has a more succinct\n  way of teaching you programming language concepts, but the language also\n  has the most succinct way of teaching you language design mistakes if you\n  listen critically to its many design decision and don't accept them as\n  the gospel they are attempted sold as.\n\n  Common Lisp is worth knowing and using well -- no other language has a\n  more succinct (yet supremely readable) expression of complex, real-life\n  programming tasks and problems, and your ability to build your language\n  towards your problem is its most unique strength, yet the very concept of\n  building a language suitable to a problem is foreign to most other\n  languages and programming cultures.\n\n  incidentally, Scheme was a very good example of what happens when you\n  take a particular, favored programming methodology and hard-code it into\n  a language design -- you find that as you optimize your design too much,\n  you lose the freedom to do anything else with similar ease without having\n  to create _another_ and separate mini-language, and this means writing\n  all the support machinery all over again for every langauge -- a favored\n  academic exercise worth approximately nothing outside academia once you\n  get the degree.\n\n#:Erik\n\n",
  "date": "2000-01-27",
  "author": "Erik Naggum",
  "references": [],
  "source": "naggum"
}