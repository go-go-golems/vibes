{
  "url": "https://www.xach.com/naggum/articles/3160482077049507@naggum.no.html",
  "id": "3160482077049507@naggum.no",
  "title": "Re: More Scope...",
  "content": "\nSubject: Re: More Scope...\nFrom: Erik Naggum <erik@naggum.no>\nDate: 2000/02/25\nNewsgroups: comp.lang.lisp\nMessage-ID: <3160482077049507@naggum.no>\n\n* Keke Abe\n| Could you explain the distinction?  I've read the 1996 thread but could\n| not figure that out.\n\n  a binding of a lexical variable is an entirely new variable, one that may\n  be captured independently of any other variable, and which is not visible\n  anywhere else.  a binding of a special variable is a dynamic association\n  between variable and value which is seen everywhere else the same\n  variable is referenced.  the reference to a lexical variable is under the\n  supreme control of the compiler, which may allocate it to a register or\n  to a stack frame, and which will typically discard the symbol association.\n  the reference to a special variable is like a call to symbol-value on\n  that symbol.\n\n  this means that the statement \"there may be a lexical and dynamic\n  variable with the same name\" is terribly confused.  yes, it is possible\n  to \"forget\" to declare a symbol special, which means any binding will be\n  lexical, but so, then, will any normal reference.  in order to access the\n  symbol, you can no longer just name it, you need to call symbol-value or\n  set when you want to read or change its value.  but at this time, we're\n  clearly doing something very different than what we did with variables --\n  we're actually tinkering with the underlying implementation of special\n  variables.\n\n  a fully true statement would be that the symbol-value slot of a symbol is\n  accessible and may be accessed also when the symbol has not been declared\n  special.  however, using a variable means _not_ having to do anything\n  special like that at every access, so it's clear that we access a\n  symbol's internal information in code like this:\n\n(1) common-lisp-user\n;; In Lisp Listener #2\n(2) common-lisp-user\n(defun foobar (x)\n  (values x (symbol-value 'x)))\n=> foobar\n(3) common-lisp-user\n(setq x 666)\n=> 666\n(4) common-lisp-user\n(foobar 4711)\n=> 4711\n=> 666\n(5) common-lisp-user\n(defvar x 69)\n=> x\n(6) common-lisp-user\n(foobar 4711)\n=> 4711\n=> 4711\n(7) common-lisp-user\n\n  hope this helps.\n\n#:Erik\n\n",
  "date": "2000-02-25",
  "author": "Erik Naggum",
  "references": [],
  "source": "naggum"
}