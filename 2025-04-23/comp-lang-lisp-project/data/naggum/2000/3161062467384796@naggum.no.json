{
  "url": "https://www.xach.com/naggum/articles/3161062467384796@naggum.no.html",
  "id": "3161062467384796@naggum.no",
  "title": "Re: [executables] was: why Haskell hasn't replaced CL yet?",
  "content": "\nSubject: Re: [executables] was: why Haskell hasn't replaced CL yet?\nFrom: Erik Naggum <erik@naggum.no>\nDate: 2000/03/03\nNewsgroups: comp.lang.lisp\nMessage-ID: <3161062467384796@naggum.no>\n\n* Samuel A. Falvo II\n| With the computer doing absolutely nothing else in the process.  Do you\n| see the difference here?  In a real-world situation, a computer could be\n| handling network connections, performing back-ups, or otherwise running\n| other CPU-intensive tasks in the background.  That all will definately\n| influence (and lengthen) startup times.\n\n  oh, geez, when will this _end_?\n\n  I don't have this powerful a machine just to boast about it and play\n  games.  it's a work-horse for serious development, and it has a number of\n  non-trivial duties.  at the time I ran those tests, it turns out that it\n  was servicing a few thousand FTP requests from local network machines\n  that were upgrading some software automatically over the span of the few\n  minutes I ran the tests, it ran a bunch of Netscape frames with animated\n  advertising GIFs, and it provided monitoring and backup services for 6\n  other computers on its local network, which involves network traffic and\n  low CPU consistency checking.  it also received four e-mail messages, the\n  processing of which fires up an Emacs in batch mode to handle the\n  filtering and processing of the incoming messages.  the only thing not\n  strictly normal about this is the FTP load.  regardless, I have no idea\n  exactly how big this load was during each of the individual _seconds_\n  that I ran my tests.  I have reason to suspect that it had very little\n  effect on anything because the machine is in fact able to perform the\n  vast majority of its duties in zero noticeable time -- which is why it is\n  this powerful to begin with.  now, this _could_ explain the 5 ms extra\n  execution time I noticed, but that's just pure speculation on my part,\n  and I see little point in spending the time to figure it out.\n\n| I was just pointing out that the measurements performed could be\n| misleading due to the circumstances in which the measurements were made.\n\n  so let's assume the measurement errors were on the order of 20 vs 25 ms\n  per invocation.  that's the difference between 40 and 50 invocations per\n  second.  this bothers you a great deal, apparently.  it doesn't bother me.\n\n  and you were \"just pointing out\" that it could take _minutes_, which is\n  nothing more than really bad fiction on your part.  in _minutes_, this\n  machine has compiled GNU Emacs from scratch (2:30), built a new Linux\n  kernel (2:10), installed staroffice (1:20), built CD images for Debian\n  2.2 (3:10), or upgraded and installed a 100 packages (2:50).\n\n  to suggest that this machine should suddenly only manage to start 50\n  Allegro CL processes because of other work it's doing is simply insane.\n\n  as long as any goddamn fool can cast doubt on anything anybody says, I\n  suggest a much more honest starting point: \"I don't want to believe you!\"\n  instead of trying to smear whoever is trying to answer their questions.\n  I'm getting sick of the rampant stupidity that comes with benchmarks and\n  any other myth-deflating devices.  myths, apparently, are necessary for\n  the mental survival of some people.  perhaps it is not a good idea to try\n  to destroy their misguided beliefs because they turn out to be lunatics\n  if they can't keep their myths alive and well.\n  \n#:Erik\n\n",
  "date": "2000-03-03",
  "author": "Erik Naggum",
  "references": [],
  "source": "naggum"
}