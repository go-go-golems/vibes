{
  "url": "https://www.xach.com/naggum/articles/3162477100853468@naggum.no.html",
  "id": "3162477100853468@naggum.no",
  "title": "Re: strings and characters",
  "content": "\nSubject: Re: strings and characters\nFrom: Erik Naggum <erik@naggum.no>\nDate: 2000/03/19\nNewsgroups: comp.lang.lisp\nMessage-ID: <3162477100853468@naggum.no>\n\n* Gareth McCaughan <Gareth.McCaughan@pobox.com>\n| I'm not Barry, but I think I can.  Provided I'm allowed to use the\n| HyperSpec (which I have) rather than the Standard itself (which I don't).\n\n  note that this all hinges on the definition of STRING, not CHARACTER.\n\n  we all agree that character objects may have implementation-defined\n  attributes.  the crux of the matter is whether strings are _required_ to\n  support these implementation-defined attributes for characters stored in\n  them, or is _permitted_ only to hold simple characters, i.e., characters\n  that have null or no implementation-defined attributes.  sadly, nothing\n  you bring up affects this crucial argument.\n\n  there are two compelling reasons why implementation-defined attributes\n  are _not_ required to be retained in strings: (1) there is special\n  mention of which implementation-defined attributes are discarded when\n  reading a string literal from an input stream (which apparently may\n  support reading them, but nothing is indicated as to how this happens),\n  and (2) historically, strings did not retain bits and fonts, so if they\n  were to be supported by an implementation that conformed to CLtL1, they\n  would have to be _added_ to strings, while bits and fonts were explicitly\n  _removed_ from the language.\n\n| 1. MAKE-STRING is defined to return \"a string ... of the most\n|    specialized type that can accommodate elements of the given\n|    type\".\n| \n| 2. The default \"given type\" is CHARACTER.\n| \n| 3. Therefore, MAKE-STRING with the default ELEMENT-TYPE\n|    returns a string \"that can accommodate elements of the\n|    type CHARACTER\".\n\n  the question boils down to whether the character concept as defined in\n  isolation is the same as the character concept as defined as part of a\n  string.  if they are, your logic is impeccable.  if they aren't the same,\n  your argument is entirely moot.  I'm arguing that the crucial clue to\n  understand that there is a difference is indicated by the unique \"union\n  type\" of strings and the phrase \"or a subtype of character\" which is not\n  used of any other specialized array in the same way it is for strings --\n  no other types permit _only_ a subtype.\n\n  I'm arguing that an implementation is not required not to have a weaker\n  character concept in strings than in isolation, i.e., that strings may\n  _only_ hold a subtype of character, that implementation-defined\n  attributes are defined only to exist (i.e., be non-null) in isolated\n  character objects, and not in characters as stored in strings.\n\n| Now,\n| \n| 5. A \"string\" is defined as \"a specialized vector ... whose\n|    elements are of type CHARACTER or a subtype of type CHARACTER\".\n\n  _please_ note that no other specialized vector type is permitted the\n  leeway that \"or a subtype of\" implies here.  for some bizarre reason, the\n  bad imitation jerk from Harlequin thought that he could delete \"of type\n  CHARAACTER\" since every type is a subtype of itself.  however, the key is\n  that this wording effectively allows a proper subtype of character to be\n  represented in strings.  a similar wording does not exist _elsewhere_ in\n  the standard, signifying increased importance by this differentiation.\n\n| 8. There is such a thing as a specialized array with elements\n|    of type CHARACTER or some subtype thereof, which is capable\n|    of holding arbitrary things of type CHARACTER as elements.\n\n  this is a contradiction in terms, so I'm glad you conclude this, as it\n  shows that carrying \"or a subtype thereof\" with you means precisely that\n  the standard does not require a _single_ string type to be able to hold\n  _all_ character values.  that is why string is a union type, unlike all\n  other types in the language.\n  \n| I'd have thought that if strings were special in the kind of way you're\n| saying they are, there would be some admission of the fact here.  There\n| isn't.\n\n  there is particular mention of \"or a subtype of character\" all over the\n  place when strings are mentioned.  that's the fact you're looking for.\n\n  however, if you are willing to use contradictions in terms as evidence of\n  something and you're willing to ignore facts on purpose, there is not\n  much that logic and argumentation alone can do to correct the situation.\n\n| I have been unable to find anything in the HyperSpec that justifies this.\n\n  again, look for \"or a subtype of character\" in the definition of STRING.\n\n#:Erik\n\n",
  "date": "2000-03-19",
  "author": "Erik Naggum",
  "references": [],
  "source": "naggum"
}