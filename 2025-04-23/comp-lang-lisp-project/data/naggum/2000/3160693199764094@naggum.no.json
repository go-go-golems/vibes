{
  "url": "https://www.xach.com/naggum/articles/3160693199764094@naggum.no.html",
  "id": "3160693199764094@naggum.no",
  "title": "Re: [executables] was: why Haskell hasn't replaced CL yet?",
  "content": "\nSubject: Re: [executables] was: why Haskell hasn't replaced CL yet?\nFrom: Erik Naggum <erik@naggum.no>\nDate: 2000/02/28\nNewsgroups: comp.lang.lisp\nMessage-ID: <3160693199764094@naggum.no>\n\n* not.for.email@not.for.spam\n| When you deliver an application, you have to take into account that the\n| users might not have access to your Lisp environment.\n\n  well, this is the meaningless part.  when people deliver applications,\n  they take for granted that you already have the relevant portions of the\n  environment the application needs in the shape of DLLs (or other forms of\n  shared libraries and resources) to make it run.  if you don't, you're\n  expected to download it, or in the worst case, get the application with a\n  bunch of such libraries.\n\n  therefore, the question is: what's considered the application?  the DLLs\n  and the whole shebang or _just_ the executable?  in my view, it doesn't\n  make sense to separate them (neither in the case of C nor CL), but in the\n  minds of people who compare sizes of executables, the DLLs are somehow\n  irrelevant, but if they are made aware of them for some languages, like\n  some not-so-helpful Lisp people seem to force them into, they will also\n  count the runtime system.  this is a very bad move.  don't call attention\n  to these things, and they'll never notice them the exact same way they\n  never notice the multimegabyte DLLs they install for other packages.\n\n| You also have to take into account that they might want the application\n| delivered to their email inboxes, and that they might have a limit on the\n| size of an incoming message.\n\n  sorry to say so, but this is a specious argument at best.  people need to\n  install some form of runtime system library _once_, and can thereafter\n  accept any small \"executable\" = application.  this is not a big deal.\n  what's necessary to ship for Common Lisp programs is usually much smaller\n  than you need to ship for other languages once you're past this point.\n\n| As another example, suppose I'm a naive user who uses your program from\n| my text-editor, invoking it with a filter-region command, to capture its\n| output in my edit buffer.  If I know someone else who has the same\n| program written in C++, and I've noticed that they can do the\n| filter-region thing in a tiny fraction of a second, but I always have to\n| wait almost a full second, I might start to envy them, and wish mine were\n| written in C++ instead of Lisp.\n\n  this would have been a useful piece of input if it were true.  it isn't.\n  that is, it used to be true 20 years ago, and today it's stale myth.\n\n| In the real world, we have to keep the users happy.\n\n  well, in the mythical world, the users aren't happy.  in the real world,\n  they don't care what language is used as long as they get what they want,\n  and users put up with a _lot_ of compromises.  speed is no longer an\n  issue, since the hardware new stuff is being deployed on is really fast.\n  (just trust me on this if you don't believe it.)\n\n| We have to instead say something like, \"yes, a Lisp program does take 750\n| ms to start running, but here are the ways you can mitigate that, and\n| here are the advantages you get for tolerating that.\"\n\n  do tell me just _why_ do we have to lie?  this is so blatantly stupid I\n  get _sick_.  on my system, the default Allegro CL starts up in about 20\n  ms and with one my applications which has a lot of startup-time\n  compucation, it takes about 35 ms on a bad day.\n\n| If we evade the question, the users will assume the worst.\n\n  and some will think _we're_ lying when we tell them that the startup-time\n  of a C++ program (and certainly a Java program) is longer than that of a\n  full-blown Common Lisp system.  do you know how we can deal with that,\n  considering your strong desire to perpetuate old myths?\n\n  you're welcome to the real world any time, but if you have nothing more\n  to contribute than trite old myths, you're part of the problem of the\n  mythical world Lisp _still_ has to fight, not part of any solution in the\n  real world.\n\n#:Erik\n\n",
  "date": "2000-02-28",
  "author": "Erik Naggum",
  "references": [],
  "source": "naggum"
}