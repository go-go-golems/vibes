{
  "url": "https://www.xach.com/naggum/articles/3160741395490719@naggum.no.html",
  "id": "3160741395490719@naggum.no",
  "title": "Re: [executables] was: why Haskell hasn't replaced CL yet?",
  "content": "\nSubject: Re: [executables] was: why Haskell hasn't replaced CL yet?\nFrom: Erik Naggum <erik@naggum.no>\nDate: 2000/02/28\nNewsgroups: comp.lang.lisp\nMessage-ID: <3160741395490719@naggum.no>\n\n* Tim Bradshaw <tfb@cley.com>\n| I tried this and it's basically the same (but my machine is a bunch\n| slower to start than Erik's for reasons I don't really know or care).\n| I'd assume (perhaps wrongly) that Erik will see a slowdown of 2 for the\n| serial one because he has a 2-processor machine so he ought to be able to\n| schedule one process on each cpu for the pll version whereas the serial\n| one can not do that.  Of course that just makes the startup time he's\n| measuring be the effective time for a ~ 1.2GHz serial machine.  So maybe\n| it's 40ms or something, who cares?\n\n  nonono, while we're making wild conjectures about the behavior of\n  completely irrelevant tasks, we must not also make serious mistakes, or\n  the data might suddenly become statistically valid.\n\n  SMP systems don't behave the way people tend to think.  like, we used up\n  <1 second of real time, and 1.5 seconds of CPU time, which is not at all\n  close to 40 ms, but more like 30 ms with all the overhead accounted for.\n  however, each process takes less than that, but I don't really know why\n  it takes more than 25 ms per process to fire it up in such a packed loop\n  when it takes close to 20 ms when run once, by itself, but it's fairly\n  consistent.  it is not a measurement error -- the real time reported is\n  in 1 ms units, while CPU time is reported in 10 ms units.  however, the\n  processor a process runs on doesn't grow any faster just because there's\n  one more of it that can run another process -- it's still a 600MHz\n  processor.  it's only during heavy multitasking that such a system can\n  approach 1.2GHz combined performance.  otherwise, the big win is only in\n  the interactive response time when one CPU is idle.  not that I complain.\n  \n#:Erik\n\n",
  "date": "2000-02-28",
  "author": "Erik Naggum",
  "references": [],
  "source": "naggum"
}