{
  "url": "https://www.xach.com/naggum/articles/3163280191819937@naggum.no.html",
  "id": "3163280191819937@naggum.no",
  "title": "Re: Dangling Closing Parentheses vs. Stacked Closing Parentheses",
  "content": "\nSubject: Re: Dangling Closing Parentheses vs. Stacked Closing Parentheses\nFrom: Erik Naggum <erik@naggum.no>\nDate: 2000/03/29\nNewsgroups: comp.lang.lisp\nMessage-ID: <3163280191819937@naggum.no>\n\n* Paolo Amoroso\n| The fact that the dangling parentheses convention is closer to other\n| languages like C and C++ may be a good reason not to use it :)\n\n* Anthony Cartmell\n| Seems to me that this really is the main reason...  is the Lisp layout\n| \"standard\" really this sad?\n\n  there is another, deeper reason behind this that you may have overlooked.\n\n  in C, parentheses are used for a number of fundamentally different tasks,\n  and in C++ it gets _completely_ insane, but that's another matter.  after\n  a student of C has learned the painful precedence rules by rote and is\n  still trying to internalize them so he can just _read_ expressions, the\n  parentheses enter the picture as a source of pain or a painkiller when\n  the precedence rules do not match the requirements of the expression.\n  either way, there is pain.  you will often find C programmers battle\n  their operators and their precedence rules for hours on end, recompiling\n  frequently because they don't have an interactive environment, either.\n  the lesson learned by that vestige of primitive brain that keeps us from\n  sticking a hand into hot water the second time, is that parentheses are\n  painful.  that a C programmer could have gotten rid of the pain by using\n  parentheses consistently around his operators and arguments is lost by\n  this primitive part of the brain.\n\n  then Lisp comes around and it's all parentheses.  primitive brain shrieks.\n\n  this is probably not restricted to C, but a property of that horrible\n  mathematical infix syntax that is supposedly \"natural\" and which _also_\n  has precedence rules in which parentheses play an important role,\n  including the implied multiplication in the absence of operators.  it\n  could be that early childhood experiences with the utter mindlessness of\n  infix syntax and the need for parentheses to escape out of the stupid\n  rules they made up is actually exceptionally traumatic on young brains\n  who try to trust their ability to understand the world around them.\n  parentheses break their trust, so when they see Lisp and it's all\n  parentheses, they become psychotic.  this would explain a lot.  a LOT!\n\n  however, the parentheses in Lisp are just like the semicolon in C.\n\n  here's an experiment you can conduct at home: take a piece of C code to\n  which a large group of people have contributed, several thousand lines of\n  Open Source should do, modify it slightly in some useful and non-trivial\n  way that people would probably like, and insert a newline before every\n  semicolon and indent the line an extra tab relative to the line it used\n  to belong to, ship the code to all the people who have contributed and be\n  very enthusiastic about your improvements, but don't comment on the style\n  change.  if you do _not_ receive realistic death threats, consider the\n  experiment a failure.\n\n#:Erik\n\n",
  "date": "2000-03-29",
  "author": "Erik Naggum",
  "references": [],
  "source": "naggum"
}