{
  "url": "https://www.xach.com/naggum/articles/3160943130779380@naggum.no.html",
  "id": "3160943130779380@naggum.no",
  "title": "Re: A modest proposal (long)",
  "content": "\nSubject: Re: A modest proposal (long)\nFrom: Erik Naggum <erik@naggum.no>\nDate: 2000/03/01\nNewsgroups: comp.lang.lisp\nMessage-ID: <3160943130779380@naggum.no>\n\n* Bill Newman\n| It's not just a beginner problem. The program\n|   (DEFUN FOO (X) (BAR X))\n|   (DEFVAR X)\n| means something different from\n|   (DEFVAR X)\n|   (DEFUN FOO (X) (BAR X))\n| And if the DEFVAR is in one file, and the DEFUN is in another, then the\n| semantics change silently depending on what order you compile them in.\n\n  I maintain that this is a beginner problem, only.  real Lisp programmers\n  don't call their global variables \"X\".  real Lisp programmers use\n  packages if they want their symbols to stay of other people's face.  real\n  Lisp programmers know about unintern, too.\n\n| I'd say this is a design flaw that makes them not particularly safe.\n\n  it's a design flaw to you because your notion of safe is wrong.\n\n| (By the way, I've considered making SBCL issue STYLE-WARNINGs for any\n| SPECIAL use of non-*FOO*-style symbols, and any non-SPECIAL use of\n| *FOO*-style symbols, to detect problems like this. But I'm a little\n| uncomfortable embedding informal naming conventions in the compiler, so\n| I've avoided doing this so far. Does anyone have any opinions on whether\n| such STYLE-WARNINGs would be The Right Thing?)\n\n  I have already said what I think is the right thing here: demand that\n  there be lexically apparent declarations that reiterate the special\n  status of symbols so declared globally.  lacking such a declaration, you\n  might issue a style-warning for free variables even if you know they are\n  globally declared special.  it will lead to slightly more verbose code,\n  but the excuse to be making invisible, pervasive changes would go away.\n\n| Yes, I also really wish there was a standard way to query \"is symbol FOO\n| special?\" And \"what's the value of the optimization property BAR?\" too..\n\n  precisely, and this is the _only_ problem worth solving as I see it.\n\n#:Erik\n\n",
  "date": "2000-03-01",
  "author": "Erik Naggum",
  "references": [],
  "source": "naggum"
}