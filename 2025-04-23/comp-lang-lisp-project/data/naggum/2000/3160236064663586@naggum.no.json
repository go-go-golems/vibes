{
  "url": "https://www.xach.com/naggum/articles/3160236064663586@naggum.no.html",
  "id": "3160236064663586@naggum.no",
  "title": "Re: The inverse of optional arguments.",
  "content": "\nSubject: Re: The inverse of optional arguments.\nFrom: Erik Naggum <erik@naggum.no>\nDate: 2000/02/22\nNewsgroups: comp.lang.lisp\nMessage-ID: <3160236064663586@naggum.no>\n\n* Jon Haugsand <Jon.Haugsand@nr.no>\n| Maybe I am blind, but I cannot find out a way to do the following.  I\n| have a function that has a function parameter where the latter is called\n| with some arguments.  However I would like to call it with more arguments\n| if the function would accept them.  An example:\n| \n| (defun mydo (proc)\n|   (apply proc (list :extra 5)))\n| \n| (mydo #'(lambda (&key (extra 0)) (+ 4 extra)))\n| (mydo #'(lambda () 4))\n| \n| The first call to MYDO works, however I would like something like the\n| second too, where APPLY simply should ignore extra parameters when not\n| required.\n\n  first, you need to make sure that the function you're calling has &key in\n  its argument list.  then, you call it with :allow-other-keys t in its\n  argument list.  this will silence the default action for unknown keyword\n  arguments.\n\n  the function function-lambda-expression should return the lambda\n  expression for the function in question, but it is allowed to return nil\n  for any function, so you're a little out of luck without special support\n  for this thing.  in Allegro CL, however, the function excl:arglist\n  returns the argument list of the function, as it was known when the\n  function was compiled (which may not be the verbatim argument list due to\n  macro \"preprocessing\").  this is usually sufficient to see whether you\n  have a keyword-argument-accepting function.\n\n  however, the general problem you're tring to solve is more interesting:\n  figuring out how to express a \"protocol\" for functions that accept\n  functions as arguments and call them with something other than a trivial\n  transformation of its own argument list.  I believe this is partly what\n  makes up the concept of \"interface\" in Java and it would be kind of nice\n  if it were solved neatly for Common Lisp, too.\n\n#:Erik\n\n",
  "date": "2000-02-22",
  "author": "Erik Naggum",
  "references": [],
  "source": "naggum"
}