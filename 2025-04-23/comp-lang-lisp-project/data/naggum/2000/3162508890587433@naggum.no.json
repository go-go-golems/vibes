{
  "url": "https://www.xach.com/naggum/articles/3162508890587433@naggum.no.html",
  "id": "3162508890587433@naggum.no",
  "title": "Re: Macro question (bizarre)",
  "content": "\nSubject: Re: Macro question (bizarre)\nFrom: Erik Naggum <erik@naggum.no>\nDate: 2000/03/20\nNewsgroups: comp.lang.lisp\nMessage-ID: <3162508890587433@naggum.no>\n\n* Tom Breton <tob@world.std.com>\n| One of the best things I learned as a programmer was *not* to grab at\n| everything that looked like an opportunity to optimize.\n\n  I'm sure that's true for you.  one of the best things I learned as a\n  novice programmer was that no matter what I choose to do, it has impact\n  on performance, and if I want to waste as little time as possible going\n  back over code and rewrite it, it would help me a lot to understand as\n  much as possible both about the hardware and the language used.  the more\n  factors I can deal with at the same time, the less time I spending fixing\n  up code that ignored one or more factors that turned to be important.\n  the only way to deal with a whole bunch of factors at once is to work so\n  much with them they migrate into your automated, emotional response\n  system, just like people walk and type and talk without actually thinking\n  about _any_ of the specific physical operations involved.\n\n| I find I rarely actually want the optimization enuff to be worth doing\n| later.\n\n  of course not.  that's the problem with doing optimization too late.\n\n  premature optimization can hurt you, and real bad at that.  that doesn't\n  mean thinking in terms of optimization is bad.  it means that you don't\n  do optimization stuff that is likely to hurt you, and you spend a fair\n  amount of your working life acquiring the experience that tells you that\n  some things may hurt a little, yet need to be done, anyway.  avoiding all\n  kinds of hurt is a very good way never to acquire _any_ experience.\n\n  tell you what.  I recently got a position where I'm about to hire a\n  sysadm and some programmers.  I'm looking for people who are good at what\n  they do, obviously, and to me, that has always meant an interest in stuff\n  that happens \"below\" whatever you're \"supposed\" to be doing, as in\n  _caring_.  a sysadm who doesn't care about hardware is obviously going to\n  run into a situation one day where his non-caring will impact everyone\n  else badly.  it is less obvious with a programmer, but I have decided\n  that I'm not going to hire Common Lisp programmers who don't want to know\n  how to read the disassembled code of a compiled function.  neither will I\n  let anyone who is unwilling to read RFCs to understand TCP/IP and other\n  networking fundamentals work on network protocol implementations, even\n  high-level ones.  likewise, if someone told me that he'd always optimize\n  late, I'd assume that he'd be a really bad programmer whose brain didn't\n  work or fast well enough that he could deal with economy of expression\n  and algorithm and resource use at the same time, and would have to take\n  care of each one at a time.  just as you don't disassemble code all the\n  time, and certainly don't think about IP packets and network issues all\n  the time, the fact that you care about it means you don't ignore it, and\n  not ignoring it means not overlooking something that can save you days in\n  debugging, weeks in design, and months in customer relations.\n\n  I'm not sure what you're trying to tell us, except that I get this really\n  bad feeling you're defending a programming style that optimized very much\n  for you not being hurt again.  if you optimize so heavily for that, I'm\n  sure you'll appreciate that other people may optimize for other factors\n  with at least as much effort.  the result for you is reinforced efficacy\n  in dealing with programming problems by removing a whole slew of issues.\n  the result for those who have automatized their optimization of code is\n  reinforced efficacy in dealing with programming problems by removing a\n  whole slew of issues.  the net result, however, is that you all feel\n  good, but their code also runs much more efficiently in the same time.\n  now, I want programmers who feel good about themselves, but I'm not going\n  to pay more than half the money for one that doesn't write good code.\n\n#:Erik\n\n",
  "date": "2000-03-20",
  "author": "Erik Naggum",
  "references": [],
  "source": "naggum"
}