{
  "url": "https://www.xach.com/naggum/articles/3161209024430026@naggum.no.html",
  "id": "3161209024430026@naggum.no",
  "title": "Re: [executables] was: why Haskell hasn't replaced CL yet?",
  "content": "\nSubject: Re: [executables] was: why Haskell hasn't replaced CL yet?\nFrom: Erik Naggum <erik@naggum.no>\nDate: 2000/03/05\nNewsgroups: comp.lang.lisp\nMessage-ID: <3161209024430026@naggum.no>\n\n* Bulent Murtezaoglu <bm@acm.org>\n| Actaully, this can be remedied reasonably easily using little programs like\n| netcat.  (goes by the name 'nc' usually).\n\n  ... which is the little C program that starts up in no time, right?\n\n  if the shells could do their own network connections, there wouldn't be\n  any need to start up those little programs.  after all, the shells don't\n  run small programs do to filename globbing, anymore, and numerous other\n  common tasks have been incorporated into the shells, simply because it\n  makes a lot more sense to incorporate them than to run small programs all\n  the time, partly because start-up time for even small programs begin to\n  matter when you have to do it hundreds of times because everything you\n  _do_ is made up a whole school of tiny little programs.\n\n  in case it hasn't become obvious by now: the more people get good at\n  writing small programs that run in \"barely noticeable time\" each, the\n  more silly things like start-up time matter to them.  the more they get\n  good at these silly things, the less intelligently they design their\n  software, and the less likely they are ever to produce software that\n  doesn't consist of tiny little fragments of code that never quite work\n  together.\n\n  when you reinvent serious programming languages in scripting languages,\n  which people have been doing in the Unix world for ages, what you get is\n  a lot of people who can do useful things in no time, and no people who\n  can figure out how to do stuff that obviates the need for tiny hacks or\n  at least that curbs their dramatic increase.  the result is a never-\n  ending increase in the need for more tiny little programs, which costs\n  all parties involved in the processes a lot of money, and which drives up\n  the cost of hiring and doing business.  the only people who profit from\n  this development are bad programmers.\n\n  I see no reason why Common Lisp should take part in that development.\n  instead, we should try to explain to people who think they have to hire\n  bad programmers that they don't have to -- they could hire a Common Lisp\n  programmer who knows how to change a mass of RUAs into a coherent system\n  that it takes far less effort to build and maintain than just to keep the\n  old system running.  it's somewhat like the difference between a mass of\n  disorganized files and information strewn all over the place and a real\n  database system.  and the funny thing is: some people _do_ get the idea.\n\n#:Erik\n\n",
  "date": "2000-03-05",
  "author": "Erik Naggum",
  "references": [],
  "source": "naggum"
}