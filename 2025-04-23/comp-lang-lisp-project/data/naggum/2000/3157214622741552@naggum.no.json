{
  "url": "https://www.xach.com/naggum/articles/3157214622741552@naggum.no.html",
  "id": "3157214622741552@naggum.no",
  "title": "Re: Returning the name of a function",
  "content": "\nSubject: Re: Returning the name of a function\nFrom: Erik Naggum <erik@naggum.no>\nDate: 2000/01/18\nNewsgroups: comp.lang.lisp\nMessage-ID: <3157214622741552@naggum.no>\n\n* sashank@vuse.vanderbilt.edu (Sashank Varma)\n| they can definitely differ if the magic-defuned function returns\n| a closure, e.g.:\n\n  this illustrates the incompleteness of the \"solution\".  take a hint and\n  realize that when a \"solution\" causes more new problems than it solves,\n  it's time to garbage collect it and look for what _solves_ the problem.\n\n  all in all, this \"what's my name\" question about functions is entirely\n  bogus, and we're just improving the way we get lost, instead of trying to\n  find our way home.  see the manual on debugging if you use Allegro CL.\n  I'm sure the other professional Common Lisps have similar debugging\n  capabilities.  (the free Lisps are lacking in this department to an\n  extent that those who reject commercial software will never understand\n  until they overcome their rejection.)\n\n  the way we deal with \"what's my name\" in recursive functions is to use\n  FLET inside the function, call it with suitable arguments, and avoid the\n  entire overhead of calling through a symbol's function slot.  this also\n  works well with anonymous functions.  however, it's a lexical name, and\n  there's no guarantee that no other function will do the same, so there's\n  no point in externalizing the name -- in fact, the opposite is the point:\n  to avoid externalizing the name.\n  \n  Allegro CL comes with sufficient documentation and source code for\n  regular licencees that you can easily figure out how to get the function\n  object of the current frame.  in most cases, you can query the function\n  object for the symbol (actually, function name) to which it was bound at\n  some time in the past.  you have no guarantee that you get back the same\n  function object if you ask for the FDEFINITION of that function name.\n\n  it seems I'm repeating myself, but you are debugging up the wrong tree.\n  learn to use the Common Lisp debugger, don't try to emulate the behavior\n  you have been forced to accept from some inferior language -- it will\n  make Common Lisp seem inferior because we don't solve problems that never\n  should have had a solution in the first place, and the cost of which\n  solution actually carries severe penalties on the language design.\n\n#:Erik\n\n",
  "date": "2000-01-18",
  "author": "Erik Naggum",
  "references": [],
  "source": "naggum"
}